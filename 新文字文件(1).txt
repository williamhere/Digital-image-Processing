#include <iostream>
#include <stdlib.h>
#include "bmp.h"
#include <math.h>

using namespace std;

int R[MaxBMPSizeX][MaxBMPSizeY];
int r[MaxBMPSizeX][MaxBMPSizeY];
int R1[MaxBMPSizeX][MaxBMPSizeY];
int R21[MaxBMPSizeX][MaxBMPSizeY];////////////// BASIC EDGE DETECTION X
int R22[MaxBMPSizeX][MaxBMPSizeY];////////////// BASIC EDGE DETECTION Y
int R23[MaxBMPSizeX][MaxBMPSizeY];////////////// BASIC EDGE DETECTION |X|+|Y|
double theta[MaxBMPSizeX][MaxBMPSizeY];
double strength[MaxBMPSizeX][MaxBMPSizeY];
int weak[MaxBMPSizeX][MaxBMPSizeY];

int main(int argc, char *argv[]){

int WIDTH, HEIGHT;
int i, j,E=0;
float sigma=10;
double t1[25] ,t2=0 ,t3[25];
double pi=3.14159265359;
double val=180/pi;

	open_bmp("lena.bmp", R, R, R, WIDTH, HEIGHT);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////高斯低通濾波(5x5)
    for (j = -2; j < 3; j++){ 
	    for (i = -2; i < 3; i++){
	        t1[0+E]=exp(-(i*i+j*j)/(2*sigma*sigma));
	        t2=t2+t1[0+E];
	        E++;
       } 
    }
    for (i = 0; i < 25; i++) 	        
        t3[i]=(1/t2)*t1[i];
    
   	for (j = 0; j < HEIGHT; j++){ 
	    for (i = 0; i < WIDTH; i++){ 	
        	R1[i][j] =R[i - 2][j + 2]*t3[0]   +R[i-1][j + 2]*t3[1]   +R[i][j + 2]*t3[2]   +R[i+1][j + 2]*t3[3]   +R[i + 2][j + 2]*t3[4]   
			         +R[i - 2][j + 1]*t3[5]   +R[i-1][j + 1]*t3[6]   +R[i][j + 1]*t3[7]   +R[i+1][j + 1]*t3[8]   +R[i + 2][j + 1]*t3[9]   
			         +R[i - 2][j]    *t3[10]  +R[i-1][j]    *t3[11]  +R[i][j]    *t3[12]  +R[i+1][j]    *t3[13]  +R[i + 2][j]    *t3[14]   
			         +R[i - 2][j - 1]*t3[15]  +R[i-1][j - 1]*t3[16]  +R[i][j - 1]*t3[17]  +R[i+1][j - 1]*t3[18]  +R[i + 2][j - 1]*t3[19]  
				     +R[i - 2][j - 2]*t3[20]  +R[i-1][j - 2]*t3[21]  +R[i][j - 2]*t3[22]  +R[i+1][j - 2]*t3[23]  +R[i + 2][j - 2]*t3[24]   ;
       } 
    } 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
for (j = 0; j < HEIGHT; j++) {
	for (i = 0; i < WIDTH; i++){
		R21[i][j] = R1[i-1][j+1] *-1 + R1[i][j+1] * 0 + R1[i+1][j+1] * 1    ///////////////X
			          + R1[i-1][j]   *-2 + R1[i][j]   * 0 + R1[i+1][j]   * 2
			          + R1[i-1][j-1] *-1 + R1[i][j-1] * 0 + R1[i+1][j-1] * 1;
		R22[i][j] = R1[i-1][j+1] *-1  + R1[i][j+1] *-2 + R1[i+1][j+1] * -1   //////////////Y
			          + R1[i-1][j]   * 0  + R1[i][j]   * 0 + R1[i+1][j]   * 0
			          + R1[i-1][j-1] * 1  + R1[i][j-1] * 2 + R1[i+1][j-1] * 1 ;
		                         
	if((abs(R21[i][j]) + abs(R22[i][j])) > 255)	                             /////////////sobel|X|+|Y|
		R23[i][j] = 255;
	else
	    R23[i][j] = abs(R21[i][j]) + abs(R22[i][j]);
	
	r[i][j]=R23[i][j];
	
	strength[i][j]= sqrt(R22[i][j]*R22[i][j]+R21[i][j]*R21[i][j]);           /////////////計算梯度大小		       
  	theta[i][j]= (atan2(R22[i][j],R21[i][j])*val);                           /////////////計算梯度角度  
	
	if (theta[i][j] < 0)                                                     /////////////量化角度成8等分 
	    theta[i][j]+360;
	if (theta[i][j] >= 0){
    	if (theta[i][j] <= 22.5||theta[i][j] > 337.5)
        	theta[i][j]= 0;		
	    if (67.5 >= theta[i][j] > 22.5)
         	theta[i][j]= 45;
    	if (112.5 >= theta[i][j] > 67.5)
         	theta[i][j]= 90;
    	if (157.5 >= theta[i][j] > 112.5)
	   	    theta[i][j]= 135;
    	if (202.5 >= theta[i][j] > 157.5)
         	theta[i][j]= 180;
    	if (247.5 >= theta[i][j] > 202.5)
         	theta[i][j]= 225;
    	if (292.5 >= theta[i][j] > 247.5)
     	    theta[i][j]= 270;	
    	if (337.5 >= theta[i][j] > 292.5)
     	    theta[i][j]= 315;	
         	}	                           		                	        	                
		}
	}       
	
for (j = 0; j < HEIGHT; j++) {                                           ///////////////////////非極大值抑制 
 	  for (i = 0; i < WIDTH; i++){
            if(theta[i][j] == 0 || theta[i][j] == 180){
            if(strength[i][j] < strength[i+1][j] || strength[i][j] < strength[i-1][j])////////比較梯度強度 
               	strength[i][j] = 0;				
				else 
			    strength[i][j] = strength[i][j];   
			   } 	  	
            if(theta[i][j] == 45 || theta[i][j] == 225){
         	if(strength[i][j] < strength[i+1][j+1] || strength[i][j] < strength[i-1][j-1])
               	strength[i][j] = 0;				   
	    	else 
			    strength[i][j] = strength[i][j];   
			   }
            if(theta[i][j] == 90 || theta[i][j] == 270) {
            if(strength[i][j] < strength[i][j+1] || strength[i][j] < strength[i][j-1])
               	strength[i][j] = 0;				   
			else 
			    strength[i][j] = strength[i][j];   
			   }
            if(theta[i][j] == 135 || theta[i][j] == 315){
            if(strength[i][j] < strength[i-1][j+1] || strength[i][j] < strength[i+1][j-1])
               	strength[i][j] = 0;				   
			else 
			    strength[i][j] = strength[i][j];   
			   }		   			   
		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////
      for (j = 0; j < HEIGHT; j++) {
	  	  for (i = 0; i < WIDTH; i++){
               if(strength[i][j] >= 200)
                   r[i][j] = 255;		   
			   if(strength[i][j] <= 100)         	   
                   r[i][j] = 0;			   
			   else 			
		    	   weak[i][j] = r[i-1][j+1] + r[i][j+1] + r[i+1][j+1] +
			                    r[i-1][j] + r[i+1][j] + r[i-1][j-1] +
			                    r[i][j-1] + r[i-1][j-1];
		    }			   
		} 	 
      for (j = 0; j < HEIGHT; j++) {
	  	  for (i = 0; i < WIDTH; i++){
			if(weak[i][j] == 1){
	           if(r[i-1][j+1] == 255 || r[i][j+1]==255 || r[i+1][j+1]==255 || 
			      r[i-1][j] == 255 ||  r[i+1][j]==255 || r[i-1][j-1] == 255 ||
			      r[i][j-1] == 255 || r[i-1][j-1]==255)
			   	  r[i][j]=255;				
		       else			
	               r[i][j]=0;				
			    }		
		    }			   
		} 	 			   	
/////////////////////////////////////////////////////////////////////////////////////////////
    save_bmp("lena_new1.bmp", R1, R1, R1);
	save_bmp("lena_new2.bmp", R23, R23, R23); 
	save_bmp("lena_new3.bmp", r, r, r);
	printf("Job Finished!\n");

	close_bmp();
	system("PAUSE"); 
	return 0;
}